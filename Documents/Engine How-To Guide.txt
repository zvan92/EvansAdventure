ENGINE HOW-TO GUIDE
===================

>>>>> CREATING A NEW ITEM TYPE:

(1) Create a new class:
-----------------------

-> derive public members from Item
-> initialize the inherited members in the constructor
-> add a copy constructor that copies from an Item
-> create members as desired, with getters and setters
-> if the item can be used in combination with another item, write a CombineWithItem() method with argument format '<OTHERITEM> <otherItem>'
-> for combinable items, refer to CombineWithItem() logic for Chest class
-> [TIP]: most of the work on the item's interaction logic takes place inside its CombineWithItem()

(2) Changes to Player class:
----------------------------

-> include new item's header in Player.h
-> add a private vector of new item's type named 'player<ITEM>s'
-> add the vector to the Player constructor initialization list
-> add a getter for the vector named 'getPlayer<ITEM>s()'
-> add an override of AddItemToInventory(), with argument format '<ITEM>& <item>'
-> add an override of ConsumeItem(), same argument format
-> add an override of DropItem(), same argument format
-> for destructible items, add an override of RemoveItem(), same argument format

(3) Changes to GameManager class:
--------------------------

[ DisplayCollectItemScreen() ]

-> add 'collect' logic within scope of if "(input.length() == 1 && (choice == 'c' || choice == 'C'))"
-> for non-collectible items, refer to logic for Chest

[ DisplayInventoryScreen() ]

-> only for collectible items
-> add 'use' logic within the scope of "if (input.length() == 1 && (choice == 'u' || choice == 'U'))"
-> for combinable items, refer to logic for Key
-> add 'drop' logic within the scope of "else if (input.length() == 1 && (choice == 'd' || choice == 'D'))"

[ DisplayUseItemScreen(<ITEM>* item) ]

-> only for collectible items that can interact with others
-> create an override of this function that takes your new item as an input
-> for interactions with other items, add logic within the scope of "else if (input.length() == 1)"

(4) Changes to Room class:
--------------------------

-> include new item's header in Room.h
-> add a private vector of new item's type named 'room<ITEM>s'
-> add the vector to the Room constructor initialization list
-> add a getter for the vector named 'getRoom<ITEM>s()'
-> add an override of AddRoomItem(), with argument format '<ITEM> item'
-> add an override of RemoveRoomItem(), same argument format

(5) Changes to MapManager class:
--------------------------------

-> include new item's header in MapManager.h
-> add an override of TransferItemToPlayer(), with argument format '<ITEM> <item>'
-> add an override of TransferItemToRoom(), with argument format '<ITEM> <item>, string gridID'
-> for destructible items, add an override of RemoveItem, with argument format '<ITEM> <item>'

[ DescribeRoom() ]

-> add 'identify' logic

(6) Spawning the item:
----------------------

-> declare and initialize item instances in Game::Init()
-> use MapManager::GetInstance()->TransferItemToRoom() to spawn in a specific map grid location
-> use Player::GetInstance()->AddItemToInventory() to spawn in player inventory