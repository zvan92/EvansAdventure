GAME PROGRAMMING GUIDE
======================

>>>> SPAWNING GAME ITEMS

GameManager::Init():

-> Create items by creating object pointers:
example: "Food* apple = new Food();"

-> Set item properties by calling "setter" functions:
example: "apple->setName("Apple");" , "apple->setHealingFactor(5);"

-> Add item to player inventory by calling the Player object's "add item to inventory" function:
example: "Player:GetInstance()->AddItemToInventory(apple);"

-> Place item in a room by calling the MapManager's "transfer item to room" function:
example: "MapManager::GetInstance()->TransferItemToRoom(apple, "A4");"

-------------------------

>>>> CREATING ROOMS

MapManager::CreateRooms():

-> Create a room at a specific map coordinate by calling the Room constructor with extra parameters:

	Constructor format: Room(hasNorthWall, hasSouthWall, hasEastWall, hasWestWall, hasNorthDoor, hasSouthDoor, hasEastDoor, hasWestDoor)

	Constructor example: "Room(0, 1, 0, 1, 1, 0, 0, 0);" 
	<1 = present, 0 = not present>

	Full example with constructor: "roomMap["A4"] = Room(0, 1, 0, 1, 1, 0, 0, 0);"
	<Creates a room at map coordinate "A4" with a South wall, West wall, and North door>

	<!> IMPORTANT <!> - When creating a door you must program it into both of the rooms that are connected by the door.
	Example: if room B4 has a North door, C4 must have a South door.

-------------------------

>>>> RULES / GAME MECHANICS

Rooms:

-> Can have doors.
-> Can contain multiple items (limited by MAX_ROOM_ITEMS in GameManager.h).
-> Should not have more than 3 walls.
-> Should not have more than 3 doors.

Doors:

-> Must be unlocked by keys.
-> Can either be colour coded or regular.
-> If colour coded, the key should match the its colour. 
-> If regular, the key should be brass.

Chests:

-> Can contain food, potions, and keys.
-> Can contain multiple items (limited by MAX_CHEST_ITEMS in GameManager.h).

Food:

-> Should either heal or hurt the player.
-> Can be rotten (which hurts), or regular (which heals).

Potions:

-> Should either heal or hurt the player.
-> Can be poison (which hurts a lot), or regular (which heals a lot).